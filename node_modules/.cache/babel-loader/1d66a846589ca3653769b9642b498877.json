{"ast":null,"code":"export function showNotification(setter) {\n  setter(true);\n  setTimeout(() => {\n    setter(false);\n  }, 2000);\n}\nexport function checkWin(correct, wrong, word) {\n  let status = \"win\"; //  check for win\n\n  word.split('').forEach(letter => {\n    if (!correct.includes(letter)) {\n      status = \"\";\n    }\n  }); //  check for loss\n\n  if (wrong.length === 6) {\n    status = \"loss\";\n  }\n\n  return status;\n}\nexport function beginWithWord(index, arrayOne, arrayTwo) {\n  let word = \"\";\n\n  if (index === 0) {\n    word = arrayOne[Math.floor(Math.random() * arrayOne.length)];\n  } else {\n    word = arrayTwo[Math.floor(Math.random() * arrayTwo.length)];\n  }\n\n  return word;\n}","map":{"version":3,"sources":["/Users/jonathangirma/code/hangman-react/src/helpers/helpers.js"],"names":["showNotification","setter","setTimeout","checkWin","correct","wrong","word","status","split","forEach","letter","includes","length","beginWithWord","index","arrayOne","arrayTwo","Math","floor","random"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AACvCA,EAAAA,MAAM,CAAC,IAAD,CAAN;AACAC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,MAAM,CAAC,KAAD,CAAN;AACD,GAFS,EAEP,IAFO,CAAV;AAGD;AAED,OAAO,SAASE,QAAT,CAAkBC,OAAlB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAC7C,MAAIC,MAAM,GAAG,KAAb,CAD6C,CAG7C;;AACAD,EAAAA,IAAI,CAACE,KAAL,CAAW,EAAX,EAAeC,OAAf,CAAuBC,MAAM,IAAI;AAC/B,QAAG,CAACN,OAAO,CAACO,QAAR,CAAiBD,MAAjB,CAAJ,EAA6B;AAC3BH,MAAAA,MAAM,GAAG,EAAT;AACD;AACF,GAJD,EAJ6C,CAU7C;;AACA,MAAGF,KAAK,CAACO,MAAN,KAAiB,CAApB,EAAsB;AACpBL,IAAAA,MAAM,GAAG,MAAT;AACD;;AACD,SAAOA,MAAP;AACD;AAED,OAAO,SAASM,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AACtD,MAAIV,IAAI,GAAG,EAAX;;AACA,MAAGQ,KAAK,KAAK,CAAb,EAAe;AACbR,IAAAA,IAAI,GAAGS,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,QAAQ,CAACH,MAApC,CAAD,CAAf;AACD,GAFD,MAEO;AACLN,IAAAA,IAAI,GAAGU,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,QAAQ,CAACJ,MAApC,CAAD,CAAf;AACD;;AACD,SAAON,IAAP;AACD","sourcesContent":["export function showNotification(setter) {\n  setter(true)\n  setTimeout(() => {\n    setter(false);\n  }, 2000);\n}\n\nexport function checkWin(correct, wrong, word) {\n  let status = \"win\";\n\n  //  check for win\n  word.split('').forEach(letter => {\n    if(!correct.includes(letter)){\n      status = \"\";\n    }\n  });\n\n  //  check for loss\n  if(wrong.length === 6){\n    status = \"loss\";\n  }\n  return status;\n}\n\nexport function beginWithWord(index, arrayOne, arrayTwo){\n  let word = \"\";\n  if(index === 0){\n    word = arrayOne[Math.floor(Math.random() * arrayOne.length)];\n  } else {\n    word = arrayTwo[Math.floor(Math.random() * arrayTwo.length)];\n  }\n  return word;\n}\n"]},"metadata":{},"sourceType":"module"}